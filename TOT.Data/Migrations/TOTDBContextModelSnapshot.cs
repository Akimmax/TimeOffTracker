// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TOT.Data;

namespace TOT.Data.Migrations
{
    [DbContext(typeof(TOTDBContext))]
    partial class TOTDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("TOT.Entities.Policy_Entities.AccrualSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("AmmountAccruedTime");

                    b.Property<string>("AmmountAccruedTimeDates");

                    b.Property<double>("MaxAccrual");

                    b.Property<double>("TimeAmount");

                    b.Property<int?>("TimeMeasureId")
                        .IsRequired();

                    b.Property<int?>("TimeOffPolicyId");

                    b.HasKey("Id");

                    b.HasIndex("TimeMeasureId");

                    b.HasIndex("TimeOffPolicyId");

                    b.ToTable("AccrualSchedules");
                });

            modelBuilder.Entity("TOT.Entities.Policy_Entities.Policy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Title");

                    b.HasKey("Id");

                    b.ToTable("Policies");
                });

            modelBuilder.Entity("TOT.Entities.Policy_Entities.TimeMeasures", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("TimeMeasures");

                    b.HasData(
                        new { Id = 1, Title = "Hours" },
                        new { Id = 2, Title = "Days" },
                        new { Id = 3, Title = "Month" },
                        new { Id = 4, Title = "Years" }
                    );
                });

            modelBuilder.Entity("TOT.Entities.Policy_Entities.TimeOffPolicy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("PolicyId")
                        .IsRequired();

                    b.Property<int?>("TimeOffTypeId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("PolicyId");

                    b.HasIndex("TimeOffTypeId");

                    b.ToTable("TimeOffPolicies");
                });

            modelBuilder.Entity("TOT.Entities.Request_Entities.Check", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Reason");

                    b.Property<DateTime>("SolvedDate");

                    b.Property<int?>("StatusId")
                        .IsRequired();

                    b.Property<int?>("TimeOffRequestId")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("TimeOffRequestId");

                    b.ToTable("Checks");
                });

            modelBuilder.Entity("TOT.Entities.Request_Entities.RequestStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("RequestStatuses");

                    b.HasData(
                        new { Id = 1, Title = "Requsted" },
                        new { Id = 2, Title = "In progres" },
                        new { Id = 3, Title = "Denied" },
                        new { Id = 4, Title = "Accepted" }
                    );
                });

            modelBuilder.Entity("TOT.Entities.Request_Entities.TimeOffRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("EndTimeOffDate");

                    b.Property<string>("Note");

                    b.Property<DateTime>("StartTimeOffDate");

                    b.Property<int?>("TimeOffTypeId")
                        .IsRequired();

                    b.Property<string>("User");

                    b.HasKey("Id");

                    b.HasIndex("TimeOffTypeId");

                    b.ToTable("TimeOffRequests");
                });

            modelBuilder.Entity("TOT.Entities.Request_Entities.TimeOffType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("TimeOffTypes");
                });

            modelBuilder.Entity("TOT.Entities.Policy_Entities.AccrualSchedule", b =>
                {
                    b.HasOne("TOT.Entities.Policy_Entities.TimeMeasures", "TimeMeasure")
                        .WithMany()
                        .HasForeignKey("TimeMeasureId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TOT.Entities.Policy_Entities.TimeOffPolicy")
                        .WithMany("AccrualSchedules")
                        .HasForeignKey("TimeOffPolicyId");
                });

            modelBuilder.Entity("TOT.Entities.Policy_Entities.TimeOffPolicy", b =>
                {
                    b.HasOne("TOT.Entities.Policy_Entities.Policy", "Policy")
                        .WithMany()
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TOT.Entities.Request_Entities.TimeOffType", "TimeOffType")
                        .WithMany()
                        .HasForeignKey("TimeOffTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TOT.Entities.Request_Entities.Check", b =>
                {
                    b.HasOne("TOT.Entities.Request_Entities.RequestStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TOT.Entities.Request_Entities.TimeOffRequest", "TimeOffRequest")
                        .WithMany("Checks")
                        .HasForeignKey("TimeOffRequestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TOT.Entities.Request_Entities.TimeOffRequest", b =>
                {
                    b.HasOne("TOT.Entities.Request_Entities.TimeOffType", "TimeOffType")
                        .WithMany()
                        .HasForeignKey("TimeOffTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
